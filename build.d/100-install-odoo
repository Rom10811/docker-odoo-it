#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import subprocess

def get_env_bool(key):
    return str(os.environ.get(key)).lower() in ["true", "1"]

SOURCES_PATH = os.environ.get("SOURCES", "/home/odoo/src")
INSTALL_ODOO = get_env_bool("INSTALL_ODOO")
INSTALL_ENTERPRISE = get_env_bool("INSTALL_ENTERPRISE")
ODOO_SOURCE = os.environ.get("ODOO_SOURCE", "odoo/odoo")
ODOO_SOURCE_DEPTH = os.environ.get("ODOO_SOURCE_DEPTH")
ODOO_VERSION = os.environ.get("ODOO_VERSION")

git_args = [
    '--single-branch',
    '--branch', ODOO_VERSION,
]

if ODOO_SOURCE_DEPTH and ODOO_SOURCE_DEPTH != "false":
    git_args += ['--depth', ODOO_SOURCE_DEPTH]


if INSTALL_ODOO:
    # Clone
    source_url = "https://github.com/%s.git" % ODOO_SOURCE
    dest_path = "%s/odoo" % SOURCES_PATH
    subprocess.check_call(
        ['git', 'clone'] + git_args + [source_url, dest_path],
        stderr=sys.stderr,
        stdout=sys.stdout,
    )
    # Pip Install
    pip_args = ['--no-cache-dir', '--editable']
    if ODOO_VERSION in ['7.0', '8.0']:
        pip_args = ['--no-deps'] + pip_args
    subprocess.check_call(
        ['pip', 'install'] + pip_args + [dest_path],
        stderr=sys.stderr,
        stdout=sys.stdout,
    )
    # Make versions 7.0 to 9.0 have an `odoo` executable
    if ODOO_VERSION == '7.0':
        os.symlink("/usr/local/bin/openerp-server", "/usr/local/bin/odoo")
    elif ODOO_VERSION in ['8.0', '9.0']:
        os.symlink("/usr/local/bin/odoo.py", "/usr/local/bin/odoo")


if INSTALL_ENTERPRISE:
    if not os.environ.get("GITHUB_USER") and os.environ.get("GITHUB_TOKEN"):
        raise Exception(
            "Unable to install enterprise without "
            "GITHUB_USER and GITHUB_TOKEN")
    # Clone
    source_url = "https://%s:%s@github.com/odoo/enterprise.git" % (
        os.environ.get("GITHUB_USER"),
        os.environ.get("GITHUB_TOKEN"),
    )
    dest_path = "%s/enterprise" % SOURCES_PATH
    subprocess.check_call(
        ['git', 'clone'] + git_args + [source_url, dest_path],
        stderr=sys.stderr,
        stdout=sys.stdout,
    )

# chown sources
subprocess.check_call(['chown', '-R', 'odoo:odoo', SOURCES_PATH])
